import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
import xlrd

## Importing OpenRocket Data From Excel
#This new simulation will import all the variable values generated by OpenRocket and then will take those values directly from excel. The data will be converted into arrays and will be interpolated with the OpenRocket data time stamps. This will be used to create arrays of the data with 0.1 time stamps. This data will then be used to simulate the rocket.

##Getting the data from Excel

wb = xlrd.open_workbook('LowerAlti_PythonSim.xlsx')
sh = wb.sheet_by_index(0)    

time_raw = np.zeros(560)
for i in range(1,561):
    cell_value = sh.cell(i,0).value
    time_raw[i-1] = cell_value

time = np.linspace(0,15,151)

thrust_raw = np.zeros(560)
for i in range(1,561):
    cell_value = sh.cell(i,28).value
    thrust_raw[i-1] = cell_value

thrust_function = interpolate.interp1d(time_raw,thrust_raw,kind="linear") 
thrust = thrust_function(np.linspace(0,15,151))

mass_raw = np.zeros(560)
for i in range(1,561):
    cell_value = sh.cell(i,19).value
    mass_raw[i-1] = cell_value

mass_function = interpolate.interp1d(time_raw,mass_raw,kind="linear") 
mass = mass_function(np.linspace(0,15,151))

roll_mi_raw = np.zeros(560) ##Roll moment of inertia
for i in range(1,561):
    cell_value = sh.cell(i,22).value
    roll_mi_raw[i-1] = cell_value

roll_mi_function = interpolate.interp1d(time_raw,roll_mi_raw,kind="linear") 
roll_mi = roll_mi_function(np.linspace(0,15,151))


cd_raw = np.zeros(560) ##Drag coefficient of just rocket and no flaps
for i in range(1,561):
    cell_value = sh.cell(i,19).value
    cd_raw[i-1] = cell_value

cd_function = interpolate.interp1d(time_raw,cd_raw,kind="linear") 
cd = cd_function(np.linspace(0,15,151))

cd_raw = np.zeros(560) ##Drag coefficient of just rocket and no flaps
for i in range(1,561):
    cell_value = sh.cell(i,30).value
    cd_raw[i-1] = cell_value

cd_function = interpolate.interp1d(time_raw,cd_raw,kind="linear") 
cd = cd_function(np.linspace(0,15,151))

### Other Setup

v = np.zeros( 151 ) ##Velocity empty array
h = np.zeros( 151 ) ##Altitude empty array
D = np.zeros( 151 ) ##Drag force empty array
D_flaps = np.zeros( 151 ) ##Drag force of flaps empty array
min_vel = np.zeros( 151 ) ##Min_vel empty array for active drag code
a = np.zeros( 151 ) ##Empty array for total acc. of the rocket

A = 0.008107 # m^2 rocket reference area
A_flaps = 0.00258 * 2 #Area of 2 flaps
g = 9.8 # m/s^2
rho = 1.225 #kg/m^3, density of air
C_flaps = 1.28 #approx drag coeff of flap
ts = 0.1 # time step for discrete physics calculation
flaps = 0
des_h = 714.756 #final height 2345 ft
buffer = 3 #Buffer percent

## Main Simulation
#Using the data setup above, we can simulate the whole flight of the rocket from launch to apogee, while also including the roll control and active drag effects.

#Main Simulation for loop runs for all time steps
for i in range(1,151):
    D[i] = 1/2*rho*(v[i-1])**2*cd[i]*A #drag force
    
    #Conditionals to determine if the flaps should be open or not
    if thrust[i-1] != 0:
        flaps = 0
    elif h[i-1] > des_h:
        flaps = 1
    else:
        min_vel[i]  = np.sqrt(2*(g+D[i]/mass[i])*(des_h - h[i-1]))
        if v[i-1] > min_vel[i]*(1 + buffer/100):
            flaps = 1
        else:
            flaps = 0
    
    if flaps == 1:
        D_flaps[i] = 1/2*rho* (v[i-1])**2 * C_flaps * A_flaps #drag force due to flaps
    elif flaps == 0:
        D_flaps[i] = 0 #Flap Drag force is zero if the 
        
    a[i] = -g + thrust[i]/mass[i] -D[i]/mass[i] -D_flaps[i]/mass[i]
    
    v[i] = v[i-1] + (a[i])*ts
    
    h[i] = h[i-1] + v[i]*ts
    
        # check that the location isn't below the ground; if so, adjust as specified above
    if  h[i] <= 0:
        v[i] = 0
        h[i] = 0
    
print("Apogee:", max(h)*3.281, "feet")
